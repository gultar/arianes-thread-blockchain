{"_id":"lastBlock","lastBlock":{"blockNumber":4,"timestamp":1580586513400,"transactions":{"9cb95bb14dfc8666b552d3c91c7f6cef8b85f0858988b2cea13b37da741c0ad5":{"fromAddress":"coinbase","toAddress":"Axr7tRA4LQyoNZR8PFBPrGTyEs1bWNPj5H9yHGjvF5OG","type":"","data":"","timestamp":1580586513397,"amount":50,"nonce":0,"hash":"9cb95bb14dfc8666b552d3c91c7f6cef8b85f0858988b2cea13b37da741c0ad5","miningFee":0.0131,"delayToBlock":0,"signature":"PDvMUdCUHrBfXpu6Gp/L0VxXC9YEs6+Dc/ERTXy3LbbJKxREPOODK3PLLCbv82S04AOAjebybyIsNCyq2hlPpw=="}},"actions":{"09fba2cf2f1aaee129bc0aefc1b7f0d528b217ae9090f55ea534fb1d5b916ef8":{"fromAccount":"Tokens","type":"contract","task":"deploy","data":{"name":"Tokens","code":"\r\n\r\nconst makeExternal = require('makeExternal')\r\n\r\nclass Tokens{\r\n    constructor(init){\r\n        let { contractAccount } = init\r\n        this.name = 'Token'\r\n        this.contractAccount = contractAccount\r\n        this.state = { \r\n            tokens:{} \r\n        }\r\n    }\r\n\r\n    setState(state){\r\n        this.state = state;\r\n    }\r\n\r\n    createToken(params, account){\r\n        let { symbol, name, maxSupply } = params\r\n        if(!symbol) throw new Error('Symbol is required')\r\n        if(!name) throw new Error('Token name is required')\r\n        if(!maxSupply || maxSupply <= 0) throw new Error('Max token supply greater than 0 is required')\r\n        if(!account) throw new Error('Creator account is required')\r\n\r\n        if(typeof maxSupply == 'string'){\r\n            throw new Error('Invalid max supply value')\r\n        }\r\n\r\n        let creator = account.name;\r\n\r\n        if(this.state.tokens){\r\n            if(!this.state.tokens[symbol]){\r\n                const Permissions = require('Permissions')\r\n                this.state.tokens[symbol] = {\r\n                    symbol:symbol,\r\n                    name:name,\r\n                    maxSupply:maxSupply,\r\n                    creator:creator,\r\n                    supply:maxSupply,\r\n                    permissions: new Permissions(account),\r\n                }\r\n    \r\n                return { success:`Token ${symbol} has been created with max supply of ${maxSupply}`}\r\n    \r\n            }else{\r\n                throw new Error('Token already exists')\r\n            }\r\n        }else{\r\n            console.log('Current State:',this.state)\r\n            throw new Error('State is not properly set')\r\n        }\r\n\r\n    }\r\n\r\n    issue(issueParams, issuerAccount){\r\n        return new Promise((resolve)=>{\r\n            let { symbol, amount, receiver } = issueParams\r\n        if(!symbol || !typeof symbol == 'string') throw new Error('Token symbol is required')\r\n        if(!amount || amount <= 0) throw new Error('An amount to transfer greater than 0 is required')\r\n        if(!issuerAccount) throw new Error('Creator account of token is required')\r\n        if(!receiver) throw new Error('Receiving account is required')\r\n\r\n        if(typeof amount == 'string'){\r\n            throw new Error('Invalid amount value')\r\n        }\r\n        \r\n\r\n        let token = this.state.tokens[symbol]\r\n        let issuer = issuerAccount.name\r\n\r\n        if(token && typeof token == 'object'){\r\n            let hasSomePermission = token.permissions.accounts[issuer]\r\n            if(hasSomePermission){\r\n\r\n                let isAllowed = hasSomePermission.level == token.permissions.level['owner']\r\n                if(isAllowed){\r\n\r\n                    if(issuer == receiver) throw new Error('Cannot issue coins to owner account')\r\n                    \r\n                    if(token.supply > amount){\r\n                        \r\n                        token.supply -= amount;\r\n                        \r\n                        if(token.accountBalances){\r\n                            let receiverBalance = this.state.tokens[symbol].accountBalances[receiver]\r\n                            \r\n                            this.state.tokens[symbol].accountBalances[issuer] = token.supply\r\n                            this.state.tokens[symbol].accountBalances[receiver] = receiverBalance + amount\r\n\r\n                        }else{\r\n                            this.state.tokens[symbol].accountBalances = {\r\n                                [issuer]:token.supply,\r\n                                [receiver]:amount\r\n                            }\r\n                        }\r\n        \r\n                        resolve({ success:{ \r\n                            message:`Issued ${amount} ${symbol} to ${receiver}`,\r\n                            issuer:token.accountBalances[issuer],\r\n                            receiver:token.accountBalances[receiver]\r\n                         } })\r\n        \r\n                    }else{\r\n                        throw new Error('ERROR: Current coin supply does not allow for issuance of coins')\r\n                    }\r\n                \r\n                }else{\r\n                    throw new Error(\"Account\" +issuer+ \"is not authorized to issue coins\");\r\n                }\r\n            }else{\r\n                throw new Error('Caller account does not have existing permissions')\r\n            }\r\n\r\n        }else{\r\n            throw new Error(`Token ${symbol} does not exist`)\r\n        }\r\n        })\r\n    }\r\n\r\n    transfer(transferParams, senderAccount){\r\n        return new Promise((resolve)=>{\r\n            let { symbol, amount, receiver } = transferParams\r\n            if(!symbol || !typeof symbol == 'string') throw new Error('Token symbol is required')\r\n            if(!amount || amount <= 0) throw new Error('An amount to transfer greater than 0 is required')\r\n            if(!senderAccount) throw new Error('Sender account is required')\r\n            if(!receiver) throw new Error('Receiving account is required')\r\n\r\n            let token = this.state.tokens[symbol]\r\n            let sender = senderAccount.name\r\n\r\n            if(typeof amount == 'string'){\r\n                throw new Error('Invalid amount value')\r\n            }\r\n\r\n            if(token){\r\n\r\n                let senderBalance = this.getBalanceOfAccount({\r\n                    account:sender,\r\n                    symbol:symbol\r\n                })\r\n                let hasEnoughFunds = senderBalance >= amount\r\n\r\n                if(hasEnoughFunds){\r\n\r\n                    if(sender == receiver) throw new Error('Cannot transfer coins to the same account')\r\n                \r\n                        if(!token.accountBalances) throw new Error('Account balances have not yet been set. Token must have been issued first')\r\n                        let receiverBalance = token.accountBalances[receiver]\r\n                            \r\n                        token.accountBalances[sender] = senderBalance - amount\r\n                        token.accountBalances[receiver] = receiverBalance + amount\r\n\r\n                        resolve({ success:{\r\n                            message:`Account ${sender} transfered ${amount} ${symbol} tokens to account ${receiver}`,\r\n                            sender:token.accountBalances[sender],\r\n                            receiver:token.accountBalances[receiver]\r\n                        } })\r\n                \r\n                }else{\r\n                    throw new Error(\"Account \" +sender+ \" is does not have enough funds\");\r\n                }\r\n\r\n            }else{\r\n                throw new Error(`Token ${symbol} does not exist`)\r\n            }\r\n    \r\n        })\r\n    }\r\n\r\n    getBalanceOfAccount(params){\r\n        let { account, symbol } = params;\r\n        let token = this.state.tokens[symbol]\r\n        if(!token) throw new Error(`Token ${symbol} does not exist`)\r\n        \r\n        \r\n        let balances = token.accountBalances\r\n        if(!balances) throw new Error(`Account balances of token ${symbol} have not been set yet`)\r\n        \r\n        let accountBalance = balances[account]\r\n        if(!accountBalance) throw new Error(`Could not find balance of account ${account}`)\r\n\r\n        return accountBalance\r\n    }\r\n\r\n    async getInterface(){\r\n        let external = makeExternal({\r\n            createToken:{\r\n                type:'set',\r\n                args:[\"symbol\", \"name\", \"maxSupply\"],\r\n                description:'Creates a token that is exchangeable through actions',\r\n                returns: 'confirmation'\r\n            },\r\n            issue:{\r\n                type:'set',\r\n                args:[\"symbol\", \"amount\", \"receiver\"],\r\n                description:'Creator of token may issue tokens to another account',\r\n                returns: 'confirmation'\r\n            },\r\n            transfer:{\r\n                type:'set',\r\n                args:[\"symbol\", \"amount\", \"receiver\"],\r\n                description:'An account holding tokens may transfer to another account',\r\n                returns: 'confirmation'\r\n            },\r\n            getBalanceOfAccount:{\r\n                type:'get',\r\n                args:['account','symbol'],\r\n                description:`Get an account's balance of a given token`,\r\n                returns: ''\r\n            },\r\n            getSupply:{\r\n                type:'get',\r\n                args:['symbol'],\r\n                description:`Get the current supply of a given token`\r\n            }\r\n        })\r\n        \r\n        return external\r\n    }\r\n\r\n    getSupply({symbol}){\r\n        let token = this.state.tokens[symbol];\r\n        if(token){\r\n            return token.supply;\r\n        }else{\r\n            return { error:'Token does not exist' }\r\n        }\r\n    }\r\n}","contractAPI":{"createToken":{"type":"set","args":["symbol","name","maxSupply"],"description":"Creates a token that is exchangeable through actions","returns":"confirmation"},"issue":{"type":"set","args":["symbol","amount","receiver"],"description":"Creator of token may issue tokens to another account","returns":"confirmation"},"transfer":{"type":"set","args":["symbol","amount","receiver"],"description":"An account holding tokens may transfer to another account","returns":"confirmation"},"getBalanceOfAccount":{"type":"get","args":["account","symbol"],"description":"Get an account's balance of a given token","returns":""},"getSupply":{"type":"get","args":["symbol"],"description":"Get the current supply of a given token"}},"initParams":"{\"contractAccount\":\"Tokens\"}","account":"Tokens","state":{"tokens":{}}},"timestamp":1580586513322,"contractRef":{},"fee":1.012,"hash":"09fba2cf2f1aaee129bc0aefc1b7f0d528b217ae9090f55ea534fb1d5b916ef8","signature":"SPChl5say/+PDQ7epPOBxpbO2lom8xBVz/kR9XWe2pVdapebbj3Tva1z5LIRSiAtetNlxgzzNulC5F+GND9CZg=="}},"previousHash":"0000209a3271b7067d8aae78dbdef6cb13242b1393963cbf7e05d08410edc433","totalDifficulty":"8176","difficulty":"1060","merkleRoot":"3AB0BDB67DC400144EEC5C24854AD938B50D61EBE18EC75201683D662C3DE71E","actionMerkleRoot":"1FBE0E2F179B09A16ED6F68FC5325A4A79EE24EE68D928DB244B7D61B5C7CA74","nonce":3323269.750804525,"hash":"0002bf0229914548c42a180b0449f43570c836a84ca0aa676de6afa69264ad1d","minedBy":"Axr7tRA4LQyoNZR8PFBPrGTyEs1bWNPj5H9yHGjvF5OG","challenge":"7d1196792909c55fc17734c36b7b1d501f44659e4a427157f05dcd30dadec","startMineTime":1580586513400,"endMineTime":1580586513547,"coinbaseTransactionHash":"9cb95bb14dfc8666b552d3c91c7f6cef8b85f0858988b2cea13b37da741c0ad5","signatures":{}}}